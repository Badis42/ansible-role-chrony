---
- name: gather os specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "../vars/{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml"
    - "../vars/{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
    - "../vars/{{ ansible_distribution }}.yml"
    - "../vars/{{ ansible_os_family }}.yml"
    - "../vars/defaults.yml"

- name: ensure chrony requirements packages are installed
  action: "{{ chrony_package_info.pkg_mgr }}"
  args: chrony_package_info.args
  with_items: chrony_package_info.pre_pkgs
  when: chrony_package_info.pre_pkgs|length > 0

- name: ensure chrony packages are installed
  action: "{{ chrony_package_info.pkg_mgr }}"
  args: chrony_package_info.args
  with_items: chrony_package_info.pkgs
  when: chrony_package_info.pkgs|length > 0

- name: update chrony.conf from template
  template:
    src: chrony.conf
    dest: "{{ chrony_path_info.conf_path }}"
    owner: root
    group: root
    mode: 0644
  register: chrony_conf

- name: ensure chrony service is started and enabled
  service: 
    name: "{{ chrony_service_info.name }}"
    enabled: yes
    state: started 
    pattern: chronyd

- name: ensure chrony service is restarted if necessary
  service: 
    name: "{{ chrony_service_info.name }}"
    state: restarted 
    pattern: chronyd
  when: chrony_conf|changed
